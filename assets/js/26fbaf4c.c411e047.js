"use strict";(self.webpackChunksymfony_mongodb_atlas_workshop=self.webpackChunksymfony_mongodb_atlas_workshop||[]).push([[389],{5057:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(4848),o=t(8453);const i={},r="\ud83c\udf0e Full code",l={id:"structure-site/fullcode",title:"\ud83c\udf0e Full code",description:"The full code can be found in the main github repo.",source:"@site/docs/40-structure-site/7-fullcode.mdx",sourceDirName:"40-structure-site",slug:"/structure-site/fullcode",permalink:"/symfony-mongodb-rental-workshop/docs/structure-site/fullcode",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/symfony-mongodb-rental-workshop/blob/main/docs/40-structure-site/7-fullcode.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcda My Bookings page",permalink:"/symfony-mongodb-rental-workshop/docs/structure-site/backend-4"},next:{title:"\ud83d\udca1 Testing the application",permalink:"/symfony-mongodb-rental-workshop/docs/category/-testing-the-application"}},s={},c=[{value:"config/routes.yaml",id:"configroutesyaml",level:2},{value:"RentalController.php",id:"rentalcontrollerphp",level:2},{value:"BookingController.php",id:"bookingcontrollerphp",level:2},{value:"Rental.php",id:"rentalphp",level:2},{value:"Booking.php",id:"bookingphp",level:2},{value:"Availability.php",id:"availabilityphp",level:2},{value:"RentalType.php",id:"rentaltypephp",level:2},{value:"base.html.twig",id:"basehtmltwig",level:2},{value:"rental/index.html.twig",id:"rentalindexhtmltwig",level:2},{value:"rental/details.html.twig",id:"rentaldetailshtmltwig",level:2},{value:"rental/create.html.twig",id:"rentalcreatehtmltwig",level:2},{value:"rental/confirmation.html.twig",id:"rentalconfirmationhtmltwig",level:2},{value:"rental/bookings.html.Twig",id:"rentalbookingshtmltwig",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"-full-code",children:"\ud83c\udf0e Full code"}),"\n",(0,a.jsxs)(e.p,{children:["The full code can be found in the main ",(0,a.jsx)(e.a,{href:"https://github.com/mongodb-developer/symfony-mongodb-atlas-rentals",children:"github repo"}),"."]}),"\n",(0,a.jsx)(e.p,{children:"Lets verify full code of the following project :"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:".\n\u251c\u2500\u2500 composer.json\n\u251c\u2500\u2500 composer.lock\n\u251c\u2500\u2500 symfony.lock\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 src\n\u2502\xa0\xa0 \u251c\u2500\u2500 Controller\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 BookingController.php\n|   |   \u251c\u2500\u2500 RentalController.php\n\u2502\xa0\xa0 \u251c\u2500\u2500 Document\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Booking.php\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Rental.php\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Availability.php\n\u2502\xa0\xa0 \u251c\u2500\u2500 Form\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 RentalType.php\n\u2502\xa0\xa0 \u251c\u2500\u2500\n\u251c\u2500\u2500 config\n\u2502\xa0\xa0 \u251c\u2500\u2500 packages\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 doctrine_mongodb.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 framework.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 twig.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 routing.yaml\n\u2502\xa0\xa0 \u251c\u2500\u2500 routes.yaml\n\u251c\u2500\u2500 templates\n\u2502\xa0\xa0 \u251c\u2500\u2500 rental\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 index.html.twig\n|   |   \u251c\u2500\u2500 confirmaion.html.twig\n|   |   \u251c\u2500\u2500 details.html.twig\n|   |   \u251c\u2500\u2500 create.html.twig\n|   |   \u251c\u2500\u2500 bookings.html.twig\n|   \u251c\u2500\u2500 base.html.twig\n\u251c\u2500\u2500 public\n\u2502\xa0\xa0 \u251c\u2500\u2500 index.php\n\u2502\xa0\xa0 \u251c\u2500\u2500 css\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 styles.css\n"})}),"\n",(0,a.jsx)(e.h2,{id:"configroutesyaml",children:"config/routes.yaml"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:"# controllers:\n#     resource:\n#         path: ../src/Controller/\n#         namespace: App\\Controller\n#     type: attribute\n\n# main routes\nrental_index:\n    path: /\n    controller: App\\Controller\\RentalController::index\n    methods: [GET]\n\n# create a new rental\nrental_create:\n    path: /rental/create\n    controller: App\\Controller\\RentalController::create\n    methods: [GET, POST]\n\n# show a rental\nrental_details:\n    path: /rental/{id}\n    controller: App\\Controller\\RentalController::details\n    methods: [GET]\n\n# book a rental\nrental_book:\n    path: /rental/book/{rentalId}\n    controller: App\\Controller\\RentalController::book\n    methods: [POST]\n\n# list all bookings\nbooking_index:\n    path: /booking\n    controller: App\\Controller\\BookingController::index\n    methods: [GET]\n"})}),"\n",(0,a.jsx)(e.h2,{id:"rentalcontrollerphp",children:"RentalController.php"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"<?php\n\n/**\n * RentalController\n * ---------------------\n * \n * This class is responsible for handling the rental query and booking operations.\n * \n * @category Controller\n * @package  App\\Controller\n * @author   pavel.duchovny\n * @license  apache-2.0\n */\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Document\\Booking;\nuse App\\Document\\Rental;\nuse App\\Form\\RentalType;\nuse DateTime;\nuse DateTimeImmutable;\nuse Doctrine\\ODM\\MongoDB\\DocumentManager;\nuse MongoDB\\BSON\\Regex;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n/**\n * RentalController\n * ---------------------\n * This class is responsible for handling the rental query and booking operations.\n */\n\nclass RentalController extends AbstractController\n{\n    // DocumentManager instance\n    private $_documentManager;\n    private $_logger;\n    /**\n     * __construct -\n     * \n     * This function is responsible for initializing the RentalController class.\n     * \n     * @param DocumentManager $_documentManager - The document manager\n     * @param LoggerInterface $_logger          - The logger interface\n     * \n     * @return void\n     */\n    public function __construct(DocumentManager $_documentManager, LoggerInterface $_logger)\n    {\n        $this->_documentManager = $_documentManager;\n        $this->_logger          = $_logger;\n    }\n\n    // Index action to display all the rentals or filter by city and availability\n\n    #[Route('/', name: 'rental_index', methods: ['GET'])]\n    public function index(Request $request): Response\n    {\n        // Get the city, check-in and check-out dates from the query parameters\n        $city     = $request->query->get('city');\n        $checkInInput = $request->query->get('check_in');\n        $checkOutInput = $request->query->get('check_out');\n\n        $checkIn = $checkInInput ? new DateTime($checkInInput) : null;\n        $checkOut = $checkOutInput ? new DateTime($checkOutInput) : null;\n        // Fetch all the rentals\n        if ($city && $checkIn && $checkOut) {\n            // Fetch rentals based on city and availability\n            // The availability field is an array of objects with start_date and end_date fields\n            // So we use elemMatch to query the availability array and see if the user requested dates are available\n            $rentalRepository = $this->_documentManager->getRepository(Rental::class);\n            $queryBuilder = $rentalRepository->createQueryBuilder();\n\n            $rentals = $queryBuilder\n                ->field('location')->equals(new Regex($city, 'i'))\n                ->field('availability')->elemMatch(\n                    $queryBuilder->expr()\n                        ->field('startDate')->lte($checkIn)\n                        ->field('endDate')->gte($checkOut),\n                )\n                ->getQuery()\n                ->execute();\n        } else {\n            // Fetch all the rentals\n            $rentals = $this->_documentManager->getRepository(Rental::class)->findAll();\n        }\n\n        // Render the rentals page\n        \n        return $this->render('rental/index.html.twig', ['rentals' => $rentals]);\n    }\n\n    /**\n     * Details action to display the details of a rental\n     * \n     * @param Request $request - The request object\n     * @param string  $id      - The rental id\n     * \n     * @return Response - The response object\n     */\n    #[Route('/rental/{id}', name: 'rental_details', methods: ['GET'])]\n    public function details(Request $request, string $id): Response\n    {\n        $checkInInput = $request->query->get('check_in');\n        $checkOutInput = $request->query->get('check_out');\n\n        $checkIn = $checkInInput ? new DateTime($checkInInput) : null;\n        $checkOut = $checkOutInput ? new DateTime($checkOutInput) : null;\n        $rental   = $this->_documentManager->getRepository(rental::class)->find($id);\n\n        // Calculate total price based on night cost and number of days\n        if ($checkIn && $checkOut) {\n            $interval   = $checkIn->diff($checkOut);\n            $days       = $interval->days;\n            $totalPrice =  $days * $rental->nightCost;\n        } else {\n            $totalPrice= 0;\n        }\n    \n\n\n        if (! $rental) {\n            throw $this->createNotFoundException('No rental found for id ' . $id);\n        }\n\n        // Render the rental details page\n        return $this->render(\n            'rental/details.html.twig', [\n            'rental' => $rental,\n            'totalPrice' => $totalPrice,\n            ]\n        );\n    }\n\n    /**\n     * Create action to create a new rental\n     * \n     * @param Request $request - The request object\n     * \n     * @return Response - The response object\n     */\n    #[Route('/rental/create', name: 'rental_create', methods: ['GET', 'POST'])]\n    public function create(Request $request): Response\n    {\n        // Create a new rental instance\n        $rental = new rental();\n        // print request\n        $this->_logger->info('Request: ' . $request->getContent());\n\n        // Create a form to create a new rental\n        $form = $this->createForm(RentalType::class, $rental);\n        $form->handleRequest($request);\n\n        // If the form is submitted and valid, persist the rental and redirect to the rentals page\n        if ($form->isSubmitted() && $form->isValid()) {\n            $this->_documentManager->persist($rental);\n            $this->_documentManager->flush();\n\n            return $this->redirectToRoute('rental_index');\n        }\n\n        // Render the create rental page\n        return $this->render(\n            'rental/create.html.twig', [\n            'form' => $form->createView(),\n            ]\n        );\n    }\n\n    /**\n     * Book action to book a rental\n     * \n     * @param Request $request - The request object\n     * @param string  $id      - The rental id\n     * \n     * @return Response - The response object\n     */\n    #[Route('/rental/book/{rentalId}', name: 'rental_book', methods: ['POST'])]\n    public function book(Request $request, $rentalId): Response\n    {\n        // Fetch the rental by id\n        $rental = $this->_documentManager->getRepository(Rental::class)->find($rentalId);\n\n        // If the rental is not found, throw a 404 exception\n        if (! $rental) {\n            throw $this->createNotFoundException('rental not found');\n        }\n\n        // Get the start and end dates from the request\n\n        $startDateInput = $request->request->get('startDate');\n        $endDateInput = $request->request->get('endDate');\n\n        $startDate = $startDateInput ? new DateTime($startDateInput) : null;\n        $endDate = $endDateInput ? new DateTime($endDateInput) : null;\n\n\n\n\n        // Calculate total price based on night cost and number of days\n        $interval   = $startDate->diff($endDate);\n        $days       = $interval->days;\n        $totalPrice = $days * $rental->nightCost;\n\n        // Calculate new availability based on the booking dates\n        $newAvailability = $rental->calcAvailabilitySlots($startDate, $endDate, $rental->availability->toArray());\n\n        // Create and persist the booking\n        $booking = new Booking();\n        $booking->rental = $rental;\n        $booking->rentalName = $rental->name;\n        $booking->startDate =  DateTimeImmutable::createFromMutable($startDate);\n        $booking->endDate =  DateTimeImmutable::createFromMutable($endDate);\n        $booking->totalCost = (int)$totalPrice;\n        $rental->availability = $newAvailability;\n\n        // Persist the booking and rental\n        $this->_documentManager->persist($booking);\n        $this->_documentManager->persist($rental);\n        $this->_documentManager->flush();\n\n        // Redirect to a confirmation page or show confirmation message\n        return $this->render(\n            'rental/confirmation.html.twig', [\n            'rental' => $rental,\n            'booking' => $booking,\n            'totalPrice' => $totalPrice,\n            ]\n        );\n    }\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"bookingcontrollerphp",children:"BookingController.php"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"<?php\n/**\n * BookingController\n * ---------------------\n * This class is responsible for handling the booking query operations.\n * \n * @category Controller\n * @package  App\\Controller\n * @author   pavel.duchovny\n * @license  apache-2.0\n */\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Document\\Booking;\nuse Doctrine\\ODM\\MongoDB\\DocumentManager;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/*\n    * BookingController\n    ---------------------\n    * This class is responsible for handling the booking query operations.\n*/\nclass BookingController extends AbstractController\n{\n    // DocumentManager instance\n    private $_documentManager;\n    private $_logger;\n    /**\n     * __construct -\n     * \n     * This function is responsible for initializing the BookingController class.\n     * \n     * @param DocumentManager $_documentManager - The document manager\n     * @param LoggerInterface $_logger          - The _logger interface\n     */\n    public function __construct(DocumentManager $_documentManager, LoggerInterface $_logger)\n    {\n        $this->_documentManager = $_documentManager;\n        $this->_logger          = $_logger;\n    }\n\n    \n    /**\n     * index -\n     * \n     * This function is responsible for rendering the bookings page.\n     * \n     * @param Request $request - The request object\n     * \n     * @return Response\n     */\n    #[Route('/booking', name: 'booking_index', methods: ['GET'])]\n    public function index(Request $request): Response\n    {\n        // Fetch all the bookings\n        $bookings = $this->_documentManager->getRepository(Booking::class)->findAll();\n\n        // Render the bookings page\n        return $this->render('rental/bookings.html.twig', ['bookings' => $bookings]);\n    }\n}\n\n"})}),"\n",(0,a.jsx)(e.h2,{id:"rentalphp",children:"Rental.php"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"<?php\n/**\n * Rental\n * ---------------------\n * This class is responsible for defining the rental document and its properties.\n *\n * @category Document\n * @package  App\\Document\n * @author   pavel.duchovny \n * @license  apache-2.0\n */\n\ndeclare(strict_types=1);\n\nnamespace App\\Document;\n\nuse DateTime;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ODM\\MongoDB\\Mapping\\Annotations as MongoDB;\nuse Doctrine\\ODM\\MongoDB\\Mapping\\Annotations as ODM;\nuse Doctrine\\ODM\\MongoDB\\Types\\Type;\n\n/*\n    * Rental\n    ---------------------\n    * This class is responsible for defining the rental document and its properties.\n*/\n#[\n    MongoDB\\Document(collection: 'rentals')\n]\n\nclass Rental\n{\n    #[ODM\\Id]\n    public  $id;\n\n    #[ODM\\Field(type: Type::STRING)]\n    public string $name;\n\n    #[ODM\\Field(type: Type::STRING)]\n    public string $location;\n\n    #[ODM\\Field(type: Type::INT)]\n    public int $nightCost;\n\n    #[ODM\\EmbedMany(targetDocument: Availability::class)]\n    public Collection $availability;\n\n    /**\n     * __construct - \n     * This function is responsible for initializing the Rental class.\n     * \n     * @return void\n     */\n    public function __construct()\n    {\n        $this->availability = new ArrayCollection();\n\n        // Create an instance of Availability and add it to the collection\n        $initialAvailability = new Availability();\n        $initialAvailability->startDate =  new DateTime('2024-01-01');\n        $initialAvailability->endDate = new DateTime('2026-01-01');\n        $this->availability->add($initialAvailability);\n    }\n\n   \n    /**\n     * Function : calcAvailabilitySlots \n     * \n     * This function is responsible for calculating the \n     * availability slots based on the booking start and end dates.\n     * \n     * @param DateTime $bookingStart - The booking start date\n     * @param DateTime $bookingEnd   - The booking end date\n     * @param array    $availability - The availability array\n     * \n     * @return ArrayCollection - The new availability slots\n     */\n    public function calcAvailabilitySlots(DateTime $bookingStart, \n        DateTime $bookingEnd, \n        array $availability\n    ): ArrayCollection {\n        // Create a new ArrayCollection to store the new availability\n        $newAvailability = new ArrayCollection();\n\n        // Loop through each period in the availability to calculate the new availability\n        foreach ($availability as $period) {\n            $periodStart = $period->startDate;\n            $periodEnd = $period->endDate;\n\n            // Booking is entirely before this period\n            if ($bookingEnd < $periodStart) {\n                $newAvailability->add($period);\n                continue;\n            }\n\n            // Booking is entirely after this period\n            if ($bookingStart > $periodEnd) {\n                $newAvailability->add($period);\n                continue;\n            }\n\n            // Booking starts before the period and ends within it\n            if ($bookingStart <= $periodStart && $bookingEnd < $periodEnd) {\n                $newPeriod = new Availability();\n                $newPeriod->startDate = $bookingEnd->modify('+1 day');\n                $newPeriod->endDate = $periodEnd;\n                $newAvailability->add($newPeriod);\n                continue;\n            }\n\n            // Booking starts during the period and ends after it\n            if ($bookingStart > $periodStart && $bookingEnd >= $periodEnd) {\n                $newPeriod = new Availability();\n                $newPeriod->startDate= $periodStart;\n                $newPeriod->endDate = $bookingStart->modify('-1 day');\n                $newAvailability->add($newPeriod);\n                continue;\n            }\n\n            // Booking is entirely within the period\n            if ($bookingStart > $periodStart && $bookingEnd < $periodEnd) {\n                $newPeriod1 = new Availability();\n                $newPeriod1->startDate = $periodStart;\n                $newPeriod1->endDate = $bookingStart->modify('-1 day');\n                $newAvailability->add($newPeriod1);\n\n                $newPeriod2 = new Availability();\n                $newPeriod2->startDate = $bookingEnd->modify('+1 day');\n                $newPeriod2->endDate = $periodEnd;\n                $newAvailability->add($newPeriod2);\n                continue;\n            }\n\n            // Booking covers the entire period\n            // Do not add the period to newAvailability (effectively removing it)\n        }\n\n        return $newAvailability;\n    }\n}\n\n"})}),"\n",(0,a.jsx)(e.h2,{id:"bookingphp",children:"Booking.php"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"<?php\n/**\n * Booking\n * ---------------------\n * This class is responsible for defining the booking document and its properties.\n *\n * @category Document\n * @package  App\\Document\n * @author   pavel.duchovny \n * @license  apache-2.0\n */\n\ndeclare(strict_types=1);\n\nnamespace App\\Document;\n\nuse DateTime;\nuse DateTimeImmutable;\nuse Doctrine\\ODM\\MongoDB\\Mapping\\Annotations as MongoDB;\nuse Doctrine\\ODM\\MongoDB\\Mapping\\Annotations as ODM;\nuse Doctrine\\ODM\\MongoDB\\Types\\Type;\n\n/*\n    * Booking\n    ---------------------\n    * This class is responsible for defining the booking document and its properties.\n*/\n#[\n    MongoDB\\Document(collection: 'bookings')\n]\nclass Booking\n{\n    #[ODM\\Id]\n    public  $id;\n\n    #[ODM\\ReferenceOne(targetDocument: Rental::class)]\n    public Rental $rental;\n\n    #[ODM\\Field(type: Type::STRING)]\n    public string $rentalName;\n\n    #[ODM\\Field(type: Type::STRING)]\n    public string $location;\n\n    #[ODM\\Field(type: Type::INT)]\n    public int $totalCost;\n\n    #[ODM\\Field(type: Type::DATE_IMMUTABLE)]\n    public DateTimeImmutable $startDate;\n\n    #[ODM\\Field(type: Type::DATE_IMMUTABLE)]\n    public DateTimeImmutable $endDate;\n\n    // Add getters and setters for each property\n   \n}\n\n"})}),"\n",(0,a.jsx)(e.h2,{id:"availabilityphp",children:"Availability.php"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"<?php\n/**\n * Availability\n * \n * This class is responsible for defining the availability \n * sub document and its properties.\n * \n * @category Document\n * @package  App\\Document\n * @author   pavel.duchovny\n * @license  apache-2.0\n */\n\ndeclare(strict_types=1);\n\nnamespace App\\Document;\n\nuse DateTime;\nuse Doctrine\\ODM\\MongoDB\\Mapping\\Annotations as ODM;\nuse Doctrine\\ODM\\MongoDB\\Types\\Type;\n/*\n    * Availability\n    ---------------------\n    * This class is responsible for defining the availability sub document and its properties.\n*/\n\n#[\n    ODM\\EmbeddedDocument\n]\nclass Availability\n{\n    #[ODM\\Field(type: Type::DATE)]\n    public DateTime $startDate;\n\n    #[ODM\\Field(type: Type::DATE)]\n    public DateTime $endDate;\n\n   \n}\n\n"})}),"\n",(0,a.jsx)(e.h2,{id:"rentaltypephp",children:"RentalType.php"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"<?php\n/** \n * RentalType - This class is responsible for creating the form for the rental entity.]\n **/\ndeclare(strict_types=1);\n\nnamespace App\\Form;\n\nuse App\\Document\\Rental;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\NumberType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\n/**\n * RentalType\n    ---------------------\n * This class is responsible for creating the form for the rental entity.\n **/\nclass RentalType extends AbstractType\n{\n    /** \n     *  buildForm -  This function is responsible for building the form for the rental entity.\n     * \n     * @param FormBuilderInterface $builder - The form builder interface\n     * @param array                $options - The options for the form\n     */\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('name', TextType::class)\n            ->add('location', TextType::class)\n            ->add('nightCost', NumberType::class);\n            // Add other fields as needed\n    }\n\n    /** \n     *  configureOptions - This function is responsible for setting the default options for the form.\n     * \n     * @param OptionsResolver $resolver - The options resolver\n     * */\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults(\n            [\n            'data_class' => Rental::class,\n            ]\n        );\n    }\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"basehtmltwig",children:"base.html.twig"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-twig",children:'<!DOCTYPE html>\n<html>\n<head>\n    <meta charset="UTF-8">\n    <title>{% block title %}MongoDB Private Home aPartments Finder!{% endblock %}</title>\n    \x3c!-- Bootstrap CSS --\x3e\n    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">\n     <link rel="icon" type="image/x-icon" href="{{ asset(\'favicon.png\') }}">\n     <link href="{{ asset(\'css/styles.css\') }}" rel="stylesheet">\n      <link href="https://use.fontawesome.com/releases/v5.15.3/css/all.css" rel="stylesheet">\n    {% block head %}{% endblock %}\n</head>\n<body>\n     <div class="header">\n        <a href="{{ path(\'rental_index\') }}">\n        <img class="logo" src="{{ asset(\'php-logo.png\') }}" alt="Private Home aPartments Logo"/>\n        </a>\n\n        <h1>Private Home aPartments</h1>\n        <a href="{{ path(\'booking_index\') }}">My Bookings</a>\n    </div>\n    {% block body %}{% endblock %}\n</body>\n</html>\n'})}),"\n",(0,a.jsx)(e.h2,{id:"rentalindexhtmltwig",children:"rental/index.html.twig"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-twig",children:'{# templates/rental/index.html.twig #}\n{% set currentCity = app.request.query.get(\'city\') %}\n{% set currentCheckIn = app.request.query.get(\'check_in\') %}\n{% set currentCheckOut = app.request.query.get(\'check_out\') %}\n\n{% extends \'base.html.twig\' %}\n\n{% block title %}Rental List{% endblock %}\n\n{% block body %}\n    <div class="container">\n           <h2>Search Rentals</h2>\n        <form action="{{ path(\'rental_index\') }}" method="get">\n            <div class="form-group">\n                <label for="city">Location:</label>\n                <input type="text" id="city" name="city" class="form-control" value="{{ app.request.query.get(\'city\') }}" required>\n            </div>\n            <div class="form-group">\n                <label for="check_in">Check-in Date:</label>\n                <input type="date" id="check_in" name="check_in" class="form-control" value="{{ app.request.query.get(\'check_in\') }}" required>\n            </div>\n            <div class="form-group">\n                <label for="check_out">Check-out Date:</label>\n                <input type="date" id="check_out" name="check_out" class="form-control" value="{{ app.request.query.get(\'check_out\') }}" required>\n            </div>\n            <button type="submit" class="btn btn-primary">Search</button>\n        </form>\n\n        \n       \n        <a href="{{ path(\'rental_create\') }}" class="btn btn-success my-3">Create New Rental</a>\n        <div class="row">\n            {% for rental in rentals %}\n                <div class="col-md-4 mb-4">\n                    <div class="card">\n                        <div class="card-body">\n                            <h4>\n                                <a href="{{ path(\'rental_details\', {\n                                    \'id\': rental.id,\n                                    \'city\': currentCity,\n                                    \'check_in\': currentCheckIn,\n                                    \'check_out\': currentCheckOut\n                                }) }}">{{ rental.name }}</a></h4>\n                            <p class="card-text"><b>Location:</b> {{ rental.location }}</p>\n                            <p class="card-text"><b>Per night:</b> {{ rental.nightCost }}$</p>\n                            \n                            \x3c!-- Add more rental details here --\x3e\n                        </div>\n                    </div>\n                </div>\n            {% endfor %}\n        </div>\n    </div>\n{% endblock %}\n\n'})}),"\n",(0,a.jsx)(e.h2,{id:"rentaldetailshtmltwig",children:"rental/details.html.twig"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-twig",children:'{# templates/rental/details.html.twig #}\n\n\n\n{% extends \'base.html.twig\' %}\n\n{% block title %}Rental Details{% endblock %}\n\n{% block body %}\n    <div class="container mt-4">\n        <h2 class="mb-3"><i class="fas fa-rental"></i> {{ rental.name }}</h2>\n        <p><i class="fas fa-map-marker-alt"></i>  {{ rental.location }}</p>\n        <p><i class="fas fa-tag"></i> <strong> Night Rate:</strong> {{ rental.nightCost }}$</p>\n         <p><i class="fas fa-tag"></i> <strong> Total Rate:</strong> {{ (totalPrice is not same as 0 )? totalPrice ~ \'$\' : \'N/A\' }}</p>\n        \x3c!-- Add more rental details here --\x3e\n\n        <h3 class="mt-4">Book a Room</h3>\n        <form class="mt-3" action="{{ path(\'rental_book\', {\'rentalId\': rental.id}) }}" method="post">\n            <div class="form-group">\n                <label for="start_date">Check In</label>\n                <input id="start_date" type="date" name="startDate" class="form-control" value="{{ app.request.query.get(\'check_in\')  }}">\n            </div>\n            <div class="form-group">\n                <label for="end_date">Check Out</label>\n                <input id="end_date" type="date" name="endDate" class="form-control" value="{{app.request.query.get(\'check_out\') }}">\n            </div>\n            <button type="submit" class="btn btn-success">Book</button>\n        </form>\n    </div>\n{% endblock %}\n\n'})}),"\n",(0,a.jsx)(e.h2,{id:"rentalcreatehtmltwig",children:"rental/create.html.twig"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-twig",children:'{# templates/rental/create.html.twig #}\n\n{% extends \'base.html.twig\' %}\n\n{% block title %}Create Rental{% endblock %}\n\n{% block body %}\n    <div class="container">\n        <h2>Create Rental</h2>\n        {{ form_start(form, {\'attr\': {\'class\': \'form-horizontal\'}}) }}\n        \n        <div class="form-group">\n            {{ form_label(form.name) }}\n            {{ form_widget(form.name, {\'attr\': {\'class\': \'form-control\'}}) }}\n            {{ form_errors(form.name) }}\n        </div>\n\n        <div class="form-group">\n            {{ form_label(form.location) }}\n            {{ form_widget(form.location, {\'attr\': {\'class\': \'form-control\'}}) }}\n            {{ form_errors(form.location) }}\n        </div>\n\n         <div class="form-group">\n            {{ form_label(form.nightCost) }}\n            {{ form_widget(form.nightCost, {\'attr\': {\'class\': \'form-control\'}}) }}\n            {{ form_errors(form.nightCost) }}\n        </div>\n        <div class="form-group">\n            <label for="start_date">Availability Start Date:</label>\n            <input type="date" id="start_date" name="start_date" class="form-control" value="2024-01-01" required>\n        </div>\n        <div class="form-group">\n            <label for="end_date">Availability End Date:</label>\n            <input type="date" id="end_date" name="end_date" class="form-control" value="2026-01-01" required>\n        </div>\n\n\n        <button type="submit" class="btn btn-success">Create</button>\n        {{ form_end(form) }}\n    </div>\n{% endblock %}\n\n'})}),"\n",(0,a.jsx)(e.h2,{id:"rentalconfirmationhtmltwig",children:"rental/confirmation.html.twig"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-twig",children:"{# templates/rental/confirmation.html.twig #}\n\n{% extends 'base.html.twig' %}\n\n{% block title %}Booking Confirmation{% endblock %}\n\n{% block body %}\n    <div class=\"container\">\n        <h2>Booking Confirmation</h2>\n        <p>Rental: {{ rental.name }}</p>\n        <p>Location: {{ rental.location }}</p>\n        <p>Check-in Date: {{ booking.startDate|date('Y-m-d') }}</p>\n        <p>Check-out Date: {{ booking.endDate|date('Y-m-d') }}</p>\n        <p>Total Price: {{ totalPrice }}$</p>\n\n        <a href=\"{{ path('rental_index') }}\" class=\"btn btn-success my-3\">Back</a>\n    </div>\n{% endblock %}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"rentalbookingshtmltwig",children:"rental/bookings.html.Twig"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-twig",children:"{# templates/rental/bookings.html.twig #}\n\n{% extends 'base.html.twig' %}\n\n{% block title %}My Bookings{% endblock %}\n\n{% block body %}\n    <div class=\"container\">\n        <h2>My Bookings</h2>\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th>Rental</th>\n                    <th>Confirmation</th>\n                    <th>Start Date</th>\n                    <th>End Date</th>\n                    <th>Total Cost</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for booking in bookings %}\n                    <tr>\n                        <td><a href=\"{{ path('rental_details', {'id': booking.rental.id}) }}\">\n                            {{booking.rentalName }}</a></td>\n                        <td>{{booking.id}}</td>\n                        <td>{{ booking.startDate|date('Y-m-d') }}</td>\n                        <td>{{ booking.endDate|date('Y-m-d') }}</td>\n                        <td>{{ booking.totalCost }}$</td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n{% endblock %}               \n                                  \n                     \n"})})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>l});var a=t(6540);const o={},i=a.createContext(o);function r(n){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);