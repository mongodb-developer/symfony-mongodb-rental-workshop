"use strict";(self.webpackChunksymfony_mongodb_atlas_workshop=self.webpackChunksymfony_mongodb_atlas_workshop||[]).push([[480],{167:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=t(4848),i=t(8453);const o={},r="\ud83d\udcc4 Booking and confirmation of a rental",l={id:"structure-site/backend-3",title:"\ud83d\udcc4 Booking and confirmation of a rental",description:"The booking and confirmation of a rental is a process that involves the following steps:",source:"@site/docs/40-structure-site/5-backend-3.mdx",sourceDirName:"40-structure-site",slug:"/structure-site/backend-3",permalink:"/symfony-mongodb-rental-workshop/docs/structure-site/backend-3",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/symfony-mongodb-rental-workshop/blob/main/docs/40-structure-site/5-backend-3.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udd17 Backend routes details and  /rental/create",permalink:"/symfony-mongodb-rental-workshop/docs/structure-site/beckend-2"},next:{title:"\ud83d\udcda My Bookings page",permalink:"/symfony-mongodb-rental-workshop/docs/structure-site/backend-4"}},s={},d=[{value:"Routes",id:"routes",level:2},{value:"Controller",id:"controller",level:2},{value:"Example",id:"example",level:3},{value:"Confirmation Page",id:"confirmation-page",level:2},{value:"Lets test the booking process",id:"lets-test-the-booking-process",level:3}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"-booking-and-confirmation-of-a-rental",children:"\ud83d\udcc4 Booking and confirmation of a rental"}),"\n",(0,a.jsx)(e.p,{children:"The booking and confirmation of a rental is a process that involves the following steps:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"The user selects a rental and prepopulate dates  in a specific rental page."}),"\n",(0,a.jsx)(e.li,{children:'The user click on the "Book" button.'}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"routes",children:"Routes"}),"\n",(0,a.jsxs)(e.p,{children:["Lets view the routes in ",(0,a.jsx)(e.code,{children:"config/routes.yaml"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:"# book a rental\nrental_book:\n    path: /rental/book/{rentalId}\n    controller: App\\Controller\\RentalController::book\n    methods: [POST]\n"})}),"\n",(0,a.jsx)(e.h2,{id:"controller",children:"Controller"}),"\n",(0,a.jsxs)(e.p,{children:["The controller is located at ",(0,a.jsx)(e.code,{children:"src/Controller/RentalController.php"}),". Lets add the ",(0,a.jsx)(e.code,{children:"book"})," method:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"\n /**\n     * Book action to book a rental\n     * \n     * @param Request $request - The request object\n     * @param string  $id      - The rental id\n     * \n     * @return Response - The response object\n     */\n    #[Route('/rental/book/{rentalId}', name: 'rental_book', methods: ['POST'])]\n    public function book(Request $request, $rentalId): Response\n    {\n        // Fetch the rental by id\n        $rental = $this->_documentManager->getRepository(Rental::class)->find($rentalId);\n\n        // If the rental is not found, throw a 404 exception\n        if (! $rental) {\n            throw $this->createNotFoundException('rental not found');\n        }\n\n        // Get the start and end dates from the request\n\n        $startDateInput = $request->request->get('startDate');\n        $endDateInput = $request->request->get('endDate');\n\n        $startDate = $startDateInput ? new DateTime($startDateInput) : null;\n        $endDate = $endDateInput ? new DateTime($endDateInput) : null;\n\n\n\n\n        // Calculate total price based on night cost and number of days\n        $interval   = $startDate->diff($endDate);\n        $days       = $interval->days;\n        $totalPrice = $days * $rental->nightCost;\n\n        // Calculate new availability based on the booking dates\n        $newAvailability = $rental->calcAvailabilitySlots($startDate, $endDate, $rental->availability->toArray());\n\n        // Create and persist the booking\n        $booking = new Booking();\n        $booking->rental = $rental;\n        $booking->rentalName = $rental->name;\n        $booking->startDate =  DateTimeImmutable::createFromMutable($startDate);\n        $booking->endDate =  DateTimeImmutable::createFromMutable($endDate);\n        $booking->totalCost = (int)$totalPrice;\n        $rental->availability = $newAvailability;\n\n        // Persist the booking and rental\n        $this->_documentManager->persist($booking);\n        $this->_documentManager->persist($rental);\n        $this->_documentManager->flush();\n\n        // Redirect to a confirmation page or show confirmation message\n        return $this->render(\n            'rental/confirmation.html.twig', [\n            'rental' => $rental,\n            'booking' => $booking,\n            'totalPrice' => $totalPrice,\n            ]\n        );\n    }\n"})}),"\n",(0,a.jsx)(e.p,{children:"This function does the following:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Fetch the rental by id"}),"\n",(0,a.jsx)(e.li,{children:"Get the start and end dates from the request"}),"\n",(0,a.jsx)(e.li,{children:"Calculate total price based on night cost and number of days"}),"\n",(0,a.jsx)(e.li,{children:"Calculate new availability based on the booking dates"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"This helper function is used to calculate the new availability based on the booking dates, and diverge the availability slots:"}),"\n",(0,a.jsx)(e.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(e.p,{children:'Booking "Rental 1" for dates 2024-01-02 to 2024-01-05:'}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'\n{\n    rental_name : "Rental 1",\n    ...\n    availability : [\n      { "start_date" : "2024-01-01",\n        "end_date" : "2024-01-10"\n      },\n        { "start_date" : "2024-01-21",\n            "end_date" : "2025-01-01"\n        }\n    ]\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"The availability slots are diverged into 3 slots:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"2024-01-01 until 2024-01-02"}),"\n",(0,a.jsx)(e.li,{children:"2024-01-05 until 2024-01-10"}),"\n",(0,a.jsx)(e.li,{children:"2025-01-21 until 2025-01-01"}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["Lets add the helper function to the controller: ",(0,a.jsx)(e.code,{children:"src/Document/Rental.php"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"  /**\n     * Function : calcAvailabilitySlots \n     * \n     * This function is responsible for calculating the \n     * availability slots based on the booking start and end dates.\n     * \n     * @param DateTime $bookingStart - The booking start date\n     * @param DateTime $bookingEnd   - The booking end date\n     * @param array    $availability - The availability array\n     * \n     * @return ArrayCollection - The new availability slots\n     */\n    public function calcAvailabilitySlots(DateTime $bookingStart, \n        DateTime $bookingEnd, \n        array $availability\n    ): ArrayCollection {\n        // Create a new ArrayCollection to store the new availability\n        $newAvailability = new ArrayCollection();\n\n        // Loop through each period in the availability to calculate the new availability\n        foreach ($availability as $period) {\n            $periodStart = $period->startDate;\n            $periodEnd = $period->endDate;\n\n            // Booking is entirely before this period\n            if ($bookingEnd < $periodStart) {\n                $newAvailability->add($period);\n                continue;\n            }\n\n            // Booking is entirely after this period\n            if ($bookingStart > $periodEnd) {\n                $newAvailability->add($period);\n                continue;\n            }\n\n            // Booking starts before the period and ends within it\n            if ($bookingStart <= $periodStart && $bookingEnd < $periodEnd) {\n                $newPeriod = new Availability();\n                $newPeriod->startDate = $bookingEnd->modify('+1 day');\n                $newPeriod->endDate = $periodEnd;\n                $newAvailability->add($newPeriod);\n                continue;\n            }\n\n            // Booking starts during the period and ends after it\n            if ($bookingStart > $periodStart && $bookingEnd >= $periodEnd) {\n                $newPeriod = new Availability();\n                $newPeriod->startDate= $periodStart;\n                $newPeriod->endDate = $bookingStart->modify('-1 day');\n                $newAvailability->add($newPeriod);\n                continue;\n            }\n\n            // Booking is entirely within the period\n            if ($bookingStart > $periodStart && $bookingEnd < $periodEnd) {\n                $newPeriod1 = new Availability();\n                $newPeriod1->startDate = $periodStart;\n                $newPeriod1->endDate = $bookingStart->modify('-1 day');\n                $newAvailability->add($newPeriod1);\n\n                $newPeriod2 = new Availability();\n                $newPeriod2->startDate = $bookingEnd->modify('+1 day');\n                $newPeriod2->endDate = $periodEnd;\n                $newAvailability->add($newPeriod2);\n                continue;\n            }\n\n            // Booking covers the entire period\n            // Do not add the period to newAvailability (effectively removing it)\n        }\n\n        return $newAvailability;\n    }\n"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Create and persist the booking"}),"\n",(0,a.jsx)(e.li,{children:"Persist the booking and rental"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Finally, the function redirects to a confirmation page or shows a confirmation message."}),"\n",(0,a.jsx)(e.h2,{id:"confirmation-page",children:"Confirmation Page"}),"\n",(0,a.jsxs)(e.p,{children:["The confirmation page is located at ",(0,a.jsx)(e.code,{children:"templates/rental/confirmation.html.twig"}),". This page shows the booking details and the total price."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",children:"{# templates/rental/confirmation.html.twig #}\n\n{% extends 'base.html.twig' %}\n\n{% block title %}Booking Confirmation{% endblock %}\n\n{% block body %}\n    <div class=\"container\">\n        <h2>Booking Confirmation</h2>\n        <p>Rental: {{ rental.name }}</p>\n        <p>Location: {{ rental.location }}</p>\n        <p>Check-in Date: {{ booking.startDate|date('Y-m-d') }}</p>\n        <p>Check-out Date: {{ booking.endDate|date('Y-m-d') }}</p>\n        <p>Total Price: {{ totalPrice }}$</p>\n\n        <a href=\"{{ path('rental_index') }}\" class=\"btn btn-success my-3\">Back</a>\n    </div>\n{% endblock %}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"lets-test-the-booking-process",children:"Lets test the booking process"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Search a rental for a specific date"}),"\n",(0,a.jsx)(e.li,{children:'Navigate to the rental page and click on the "Book" button'}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Now try to find the same location for those dates and see that no rental is available."})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>l});var a=t(6540);const i={},o=a.createContext(i);function r(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);