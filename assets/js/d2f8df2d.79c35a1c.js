"use strict";(self.webpackChunksymfony_mongodb_atlas_workshop=self.webpackChunksymfony_mongodb_atlas_workshop||[]).push([[491],{6179:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var i=t(4848),o=t(8453);const a={},l="\ud83c\udfc3\u200d\u2642\ufe0f Application development setup",s={id:"structure-site/initial-setup",title:"\ud83c\udfc3\u200d\u2642\ufe0f Application development setup",description:"Lets start building our application building blocks:",source:"@site/docs/40-structure-site/1-initial-setup.mdx",sourceDirName:"40-structure-site",slug:"/structure-site/initial-setup",permalink:"/symfony-mongodb-rental-workshop/docs/structure-site/initial-setup",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/symfony-mongodb-rental-workshop/blob/main/docs/40-structure-site/1-initial-setup.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83c\udfe8\u2699\ufe0f Overall application overview",permalink:"/symfony-mongodb-rental-workshop/docs/structure-site/app-overview"},next:{title:"\ud83d\udce6 Backend rentals_index endpoint",permalink:"/symfony-mongodb-rental-workshop/docs/structure-site/backend-1"}},r={},d=[{value:".env file",id:"env-file",level:2},{value:"Twig template",id:"twig-template",level:2},{value:"Document entities",id:"document-entities",level:2},{value:"<code>Rental.php</code>",id:"rentalphp",level:3},{value:"<code>Booking.php</code>",id:"bookingphp",level:3},{value:"<code>Availability.php</code>",id:"availabilityphp",level:3},{value:"Generate Data for the rentals collection (Optional)",id:"generate-data-for-the-rentals-collection-optional",level:2},{value:"Prerequisites",id:"prerequisites",level:3}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"\ufe0f-application-development-setup",children:"\ud83c\udfc3\u200d\u2642\ufe0f Application development setup"}),"\n",(0,i.jsx)(e.p,{children:"Lets start building our application building blocks:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:".env"})," file to store our environment variables"]}),"\n",(0,i.jsx)(e.li,{children:"basic twig template"}),"\n",(0,i.jsxs)(e.li,{children:["Document entities for :","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Rental"}),"\n",(0,i.jsx)(e.li,{children:"Booking"}),"\n",(0,i.jsx)(e.li,{children:"Availability"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.li,{children:"Generate Data for the rentals collection"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"env-file",children:".env file"}),"\n",(0,i.jsxs)(e.p,{children:["Create a ",(0,i.jsx)(e.code,{children:".env"})," file in the root of the project and add the following:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-env",children:"###> doctrine/mongodb-odm-bundle ###\nMONGODB_URL=<your atlas cluster URI>\nMONGODB_DB=symfony\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Replace ",(0,i.jsx)(e.code,{children:"<your atlas cluster URI>"})," with the ",(0,i.jsx)(e.a,{href:"https://www.mongodb.com/docs/guides/atlas/connection-string/",children:"connection string"}),' for your MongoDB Atlas cluster. You can find this in the MongoDB Atlas UI by clicking "Connect" and then "Connect your application".']}),"\n",(0,i.jsx)(e.h2,{id:"twig-template",children:"Twig template"}),"\n",(0,i.jsx)(e.p,{children:"Twig is a template engine for PHP. It is the default template engine for Symfony. We will use it to create the views for our application.\nIt is similar to other rendering templates which dynamically generate HTML, CSS, and JavaScript."}),"\n",(0,i.jsxs)(e.p,{children:["Create a base twig template in ",(0,i.jsx)(e.code,{children:"templates/base.html.twig"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n<head>\n    <meta charset="UTF-8">\n    <title>{% block title %}MongoDB Private Home aPartments Finder!{% endblock %}</title>\n    \x3c!-- Bootstrap CSS --\x3e\n    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">\n     <link rel="icon" type="image/x-icon" href="{{ asset(\'favicon.png\') }}">\n     <link href="{{ asset(\'css/styles.css\') }}" rel="stylesheet">\n      <link href="https://use.fontawesome.com/releases/v5.15.3/css/all.css" rel="stylesheet">\n    {% block head %}{% endblock %}\n</head>\n<body>\n     <div class="header">\n        <a href="{{ path(\'rental_index\') }}">\n        <img class="logo" src="{{ asset(\'php-logo.png\') }}" alt="Private Home aPartments Logo"/>\n        </a>\n\n        <h1>Private Home aPartments</h1>\n        <a href="{{ path(\'booking_index\') }}">My Bookings</a>\n    </div>\n    {% block body %}{% endblock %}\n</body>\n</html>\n'})}),"\n",(0,i.jsxs)(e.p,{children:["This template includes the Bootstrap CSS and a custom ",(0,i.jsx)(e.code,{children:"styles.css"})," file. It also includes a header with a logo and a link to the rental index page. Every page in the application will extend this base template."]}),"\n",(0,i.jsxs)(e.p,{children:["Add the following CSS to ",(0,i.jsx)(e.code,{children:"public/css/styles.css"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-css",children:"/* public/css/styles.css */\n\n.rental-card {\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    padding: 15px;\n    margin-bottom: 20px;\n    box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n}\n\n.rental-card h3 {\n    color: #333;\n    margin-top: 0;\n}\n\n.logo {\n    width: 150px;\n    height: 150px;\n    border-radius: 50%;\n    margin-bottom: 10px;\n}\n\n.header{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 20px;\n    background-color: #f1f1f1;\n    box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n}\n\n.date-pickers {\n    display: flex;\n    justify-content: space-between;\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Additionally, add the public images to the ",(0,i.jsx)(e.code,{children:"public"})," directory:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://github.com/mongodb-developer/symfony-mongodb-atlas-rentals/tree/main/public",children:"https://github.com/mongodb-developer/symfony-mongodb-atlas-rentals/tree/main/public"})}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"document-entities",children:"Document entities"}),"\n",(0,i.jsxs)(e.p,{children:["In ",(0,i.jsx)(e.code,{children:"src/Document"}),", create the following document classes:"]}),"\n",(0,i.jsx)(e.h3,{id:"rentalphp",children:(0,i.jsx)(e.code,{children:"Rental.php"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",children:"<?php\n/**\n * Rental\n * ---------------------\n * This class is responsible for defining the rental document and its properties.\n *\n * @category Document\n * @package  App\\Document\n * @author   pavel.duchovny \n * @license  apache-2.0\n */\n\ndeclare(strict_types=1);\n\nnamespace App\\Document;\n\nuse DateTime;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ODM\\MongoDB\\Mapping\\Annotations as MongoDB;\nuse Doctrine\\ODM\\MongoDB\\Mapping\\Annotations as ODM;\nuse Doctrine\\ODM\\MongoDB\\Types\\Type;\n\n/*\n    * Rental\n    ---------------------\n    * This class is responsible for defining the rental document and its properties.\n*/\n#[\n    MongoDB\\Document(collection: 'rentals')\n]\n\nclass Rental\n{\n    #[ODM\\Id]\n    public  $id;\n\n    #[ODM\\Field(type: Type::STRING)]\n    public string $name;\n\n    #[ODM\\Field(type: Type::STRING)]\n    public string $location;\n\n    #[ODM\\Field(type: Type::INT)]\n    public int $nightCost;\n\n    #[ODM\\EmbedMany(targetDocument: Availability::class)]\n    public Collection $availability;\n\n    /**\n     * __construct - \n     * This function is responsible for initializing the Rental class.\n     * \n     * @return void\n     */\n    public function __construct()\n    {\n        $this->availability = new ArrayCollection();\n\n        // Create an instance of Availability and add it to the collection\n        $initialAvailability = new Availability();\n        $initialAvailability->startDate =  new DateTime('2024-01-01');\n        $initialAvailability->endDate = new DateTime('2026-01-01');\n        $this->availability->add($initialAvailability);\n    }\n\n   \n    /**\n     * Function : calcAvailabilitySlots \n     * \n     * This function is responsible for calculating the \n     * availability slots based on the booking start and end dates.\n     * \n     * @param DateTime $bookingStart - The booking start date\n     * @param DateTime $bookingEnd   - The booking end date\n     * @param array    $availability - The availability array\n     * \n     * @return ArrayCollection - The new availability slots\n     */\n    public function calcAvailabilitySlots(DateTime $bookingStart, \n        DateTime $bookingEnd, \n        array $availability\n    ): ArrayCollection {\n        // Create a new ArrayCollection to store the new availability\n        $newAvailability = new ArrayCollection();\n\n        // Loop through each period in the availability to calculate the new availability\n        foreach ($availability as $period) {\n            $periodStart = $period->startDate;\n            $periodEnd = $period->endDate;\n\n            // Booking is entirely before this period\n            if ($bookingEnd < $periodStart) {\n                $newAvailability->add($period);\n                continue;\n            }\n\n            // Booking is entirely after this period\n            if ($bookingStart > $periodEnd) {\n                $newAvailability->add($period);\n                continue;\n            }\n\n            // Booking starts before the period and ends within it\n            if ($bookingStart <= $periodStart && $bookingEnd < $periodEnd) {\n                $newPeriod = new Availability();\n                $newPeriod->startDate = $bookingEnd->modify('+1 day');\n                $newPeriod->endDate = $periodEnd;\n                $newAvailability->add($newPeriod);\n                continue;\n            }\n\n            // Booking starts during the period and ends after it\n            if ($bookingStart > $periodStart && $bookingEnd >= $periodEnd) {\n                $newPeriod = new Availability();\n                $newPeriod->startDate= $periodStart;\n                $newPeriod->endDate = $bookingStart->modify('-1 day');\n                $newAvailability->add($newPeriod);\n                continue;\n            }\n\n            // Booking is entirely within the period\n            if ($bookingStart > $periodStart && $bookingEnd < $periodEnd) {\n                $newPeriod1 = new Availability();\n                $newPeriod1->startDate = $periodStart;\n                $newPeriod1->endDate = $bookingStart->modify('-1 day');\n                $newAvailability->add($newPeriod1);\n\n                $newPeriod2 = new Availability();\n                $newPeriod2->startDate = $bookingEnd->modify('+1 day');\n                $newPeriod2->endDate = $periodEnd;\n                $newAvailability->add($newPeriod2);\n                continue;\n            }\n\n            // Booking covers the entire period\n            // Do not add the period to newAvailability (effectively removing it)\n        }\n\n        return $newAvailability;\n    }\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"bookingphp",children:(0,i.jsx)(e.code,{children:"Booking.php"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",children:"<?php\n/**\n * Booking\n * ---------------------\n * This class is responsible for defining the booking document and its properties.\n *\n * @category Document\n * @package  App\\Document\n * @author   pavel.duchovny \n * @license  apache-2.0\n */\n\ndeclare(strict_types=1);\n\nnamespace App\\Document;\n\nuse DateTime;\nuse DateTimeImmutable;\nuse Doctrine\\ODM\\MongoDB\\Mapping\\Annotations as MongoDB;\nuse Doctrine\\ODM\\MongoDB\\Mapping\\Annotations as ODM;\nuse Doctrine\\ODM\\MongoDB\\Types\\Type;\n\n/*\n    * Booking\n    ---------------------\n    * This class is responsible for defining the booking document and its properties.\n*/\n#[\n    MongoDB\\Document(collection: 'bookings')\n]\nclass Booking\n{\n    #[ODM\\Id]\n    public  $id;\n\n    #[ODM\\ReferenceOne(targetDocument: Rental::class)]\n    public Rental $rental;\n\n    #[ODM\\Field(type: Type::STRING)]\n    public string $rentalName;\n\n    #[ODM\\Field(type: Type::STRING)]\n    public string $location;\n\n    #[ODM\\Field(type: Type::INT)]\n    public int $totalCost;\n\n    #[ODM\\Field(type: Type::DATE_IMMUTABLE)]\n    public DateTimeImmutable $startDate;\n\n    #[ODM\\Field(type: Type::DATE_IMMUTABLE)]\n    public DateTimeImmutable $endDate;\n\n    // Add getters and setters for each property\n   \n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"Booking class exposes the properties of the booking document. It has a reference to the rental document, which is used to store the rental details for the booking."}),"\n",(0,i.jsx)(e.h3,{id:"availabilityphp",children:(0,i.jsx)(e.code,{children:"Availability.php"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",children:"<?php\n/**\n * Availability\n * \n * This class is responsible for defining the availability \n * sub document and its properties.\n * \n * @category Document\n * @package  App\\Document\n * @author   pavel.duchovny\n * @license  apache-2.0\n */\n\ndeclare(strict_types=1);\n\nnamespace App\\Document;\n\nuse DateTime;\nuse Doctrine\\ODM\\MongoDB\\Mapping\\Annotations as ODM;\nuse Doctrine\\ODM\\MongoDB\\Types\\Type;\n/*\n    * Availability\n    ---------------------\n    * This class is responsible for defining the availability sub document and its properties.\n*/\n\n#[\n    ODM\\EmbeddedDocument\n]\nclass Availability\n{\n    #[ODM\\Field(type: Type::DATE)]\n    public DateTime $startDate;\n\n    #[ODM\\Field(type: Type::DATE)]\n    public DateTime $endDate;\n\n   \n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Those classes expose the properties of the rental, booking and availability documents. The ",(0,i.jsx)(e.code,{children:"Rental"})," class has a collection of ",(0,i.jsx)(e.code,{children:"Availability"})," subdocuments, which represent the availability of the rental.\nThe only methods here are getters and setters for each property. Those will be used by the MongoDB ODM to map the documents to the database."]}),"\n",(0,i.jsx)(e.h2,{id:"generate-data-for-the-rentals-collection-optional",children:"Generate Data for the rentals collection (Optional)"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Use ",(0,i.jsx)(e.a,{href:"https://www.mongodb.com/docs/atlas/atlas-ui/documents/#insert-documents",children:"Atlas data explorer"})," to upload the following ",(0,i.jsx)(e.a,{href:"https://raw.githubusercontent.com/mongodb-developer/symfony-mongodb-atlas-rentals/main/data/symfony.rentals.json",children:"rentals.json"}),' array into the "Insert Document" json array to upload initial rentals']}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["We can use the ",(0,i.jsx)(e.a,{href:"https://www.mongodb.com/docs/mongodb-shell/install/",children:"mongosh"})," shell to insert some data into the rentals collection. We will also use the falso data generator to generate some random data for the rentals collection."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://nodejs.org/en/download/",children:"Node.js"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://www.npmjs.com/get-npm",children:"npm"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://www.mongodb.com/docs/mongodb-shell/install/",children:"MongoDB Shell"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://www.npmjs.com/package/@ngneat/falso",children:"Falso"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'npm install @ngneat/falso\nmongosh "mongodb+srv://<your atlas cluster URI>/test" --username <username>\n'})}),"\n",(0,i.jsx)(e.p,{children:"Now we will run a script to generate some random data for the rentals collection. Copy the following script and run it in the mongosh shell:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const falso = require('@ngneat/falso');\n\n// Switch to database named\nuse symfony;\n\nconst rentals = [];\nfor (let i = 0; i < 100; i++) {\n  rentals.push({\n    name: falso.randCompanyName(),\n    location: falso.randCity(),\n    night_cost: falso.randNumber({ min: 50, max: 500 }), // Random cost between 50 and 500\n    availability: [\n      {\n        start_date: new Date('2024-01-01'),\n        end_date: new Date('2026-01-01')\n      }\n    ]\n  });\n}\n\n// Assuming your collection is named 'rentals'\ndb.rentals.insertMany(rentals);\n\n// Create an index for searching by location\ndb.rentals.createIndex({ location: 1, \"availability.start_date\": 1, \"availability.end_date\": 1 });\n\n"})})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>s});var i=t(6540);const o={},a=i.createContext(o);function l(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:l(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);